import argparse
import functools
import os

def parse_line(line):
	tokens = line.split()
	file_name = tokens[0]
	width = int(tokens[1])
	height = int(tokens[2])
	frame_count = int(tokens[3])
	return {'file_name': file_name, 'width': width, 'height': height, 'frame_count': frame_count}

def parse_file(path):
	with open(path) as file:
		lines = list(file)
		return list(map(parse_line, lines))

def capture_width(capture):
	return capture['width']

def capture_height(capture):
	return capture['height']

def trimmed_source(capture):
	capture_file_name = capture['file_name']
	capture_frame_count = capture['frame_count']
	source = 'AviSource("' + capture_file_name + '")'
	assume_fps = 'AssumeFPS(70)'
	trim = 'Trim(0, ' + str(capture_frame_count - 1) + ')'
	return source + '.' + assume_fps + '.' + trim

def add_border(from_width, from_height, to_width, to_height):
	left_border = int((to_width - from_width) / 2);
	top_border = int((to_height - from_height) / 2);
	right_border = to_width - from_width - left_border;
	bottom_border = to_height - from_height - top_border;
	return 'AddBorders(' + str(left_border) + ', ' + str(top_border) + ', ' + str(right_border) + ', ' + str(bottom_border) + ')'

def add_borders_to_capture(capture):
	source = trimmed_source(capture)
	capture_w = capture_width(capture)
	capture_h = capture_height(capture)
	if ((capture_w < largest_width) or (capture_h < largest_height)):
		borders = add_border(capture_w, capture_h, largest_width, largest_height)
		return source + '.' + borders
	else:
		return source

def scale_capture(capture):
	source = trimmed_source(capture)
	capture_w = capture_width(capture)
	capture_h = capture_height(capture)
	h_scale = int(largest_width / capture_w)
	v_scale = int(largest_height / capture_h)
	scale = max(min(h_scale, v_scale), 1)
	scaled_width = capture_w * scale
	scaled_height = capture_h * scale
	resize = 'PointResize(' + str(scaled_width) + ', ' + str(scaled_height) + ')'
	borders = add_border(scaled_width, scaled_height, largest_width, largest_height)
	return source + '.' + resize + '.' + borders

def create_and_write_script(path, capture_processor, captures):
	script_parts = list(map(capture_processor, captures))
	script = ' ++ '.join(script_parts)
	with open(path, 'w') as script_file:
		script_file.write(script)

parser = argparse.ArgumentParser()
parser.add_argument("list", help="The list of capture movies, generated by DOSBox.")
args = parser.parse_args()

list_path = os.path.realpath(args.list)
(list_name, list_ext) = os.path.splitext(list_path)

captures = parse_file(list_path)
largest_width = max(map(capture_width, captures))
largest_height = max(map(capture_height, captures))

script_with_borders_path = list_name + '_borders.avs'
create_and_write_script(script_with_borders_path, add_borders_to_capture, captures)

script_with_scaling_path = list_name + '_scaled.avs'
create_and_write_script(script_with_scaling_path, scale_capture, captures)
